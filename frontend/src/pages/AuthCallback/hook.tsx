import { AxiosResponse } from "axios";
import { useEffect } from "react";
import { NavigateFunction } from "react-router-dom";
import AuthService from "../../api/services/authService";
import { BaseUserInterface } from "../../interfaces/authInterfaces";

export default function useUserAuthCallback(
  navigate: NavigateFunction,
  authService: AuthService,
  setUser: React.Dispatch<React.SetStateAction<BaseUserInterface | null>>
) {
  useEffect(() => {
    const hash = window.location.hash;

    // üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å (access_token –≤ hash)
    if (hash.includes("access_token")) {
      const hashParams = new URLSearchParams(hash.slice(1));
      const access_token = hashParams.get("access_token");

      if (access_token) {
        // –£–¥–∞–ª—è–µ–º —Ö—ç—à –∏–∑ URL, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª React Router'—É
        const cleanUrl = `${window.location.origin}${window.location.pathname}`;
        window.history.replaceState(null, "", cleanUrl);

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        authService.authWithYandex(access_token)
          .then((response: AxiosResponse) => {
            console.log("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å");
            setUser(response.data);
            navigate("/profile");
          })
          .catch((err) => {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å:", err);
            navigate("/register");
          });

        return;
      }
    }

    // üîì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ VK (code –≤ query string)
    const searchParams = new URLSearchParams(window.location.search);
    const code = searchParams.get("code");

    if (code) {
      authService.authWithVk(code)
        .then((response: AxiosResponse) => {
          console.log("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ VK");
          setUser(response.data);
          navigate("/profile");
        })
        .catch((err) => {
          console.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ VK:", err);
          navigate("/register");
        });
    } else {
      navigate("/register");
    }

  }, []);
}
